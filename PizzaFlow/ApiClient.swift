//
//  ApiClient.swift
//  PizzaFlow
//
//  Created by 596 on 05.03.2025.
//

import Foundation

class ApiClient: ObservableObject {
    private let baseURL = "http://localhost:8000"
    @Published var pizzas: [Pizza] = []
    @Published var ingridients: [Ingredient] = []
    @Published var favoritePizzas: [Pizza] = []
    @Published var pizzaIngredients: [Ingredient] = []
    @Published var token: String? {
        didSet{
            if let token = token {
                UserDefaults.standard.set(token, forKey: "authToken")
            } else {
                UserDefaults.standard.removeObject(forKey: "authToken")
            }
        }
    }
    init(){
        self.token = UserDefaults.standard.string(forKey: "authToken")
    }
    
    func fetchPizzas() {
        print("üîÑ –í—ã–∑–≤–∞–Ω fetchPizzas()")
        guard let url = URL(string: "\(baseURL)/pizzas") else {return}
        
        var request = URLRequest(url: url)
        if let token = token {
            request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        }
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")
                return
            }
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞")
                return
            }

            print("üîπ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: \(httpResponse.statusCode)")
            guard (200...299).contains(httpResponse.statusCode) else {
                print("‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ \(httpResponse.statusCode)")
                return
            }
            guard let  data = data else {
                print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
            }
            
            if let jsonString = String(data: data, encoding: .utf8) {
                print("üìú –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (RAW): \(jsonString)")
            }

            do {
                print("üìú –ü–µ—Ä–µ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º JSON:")
                print(String(data: data, encoding: .utf8) ?? "‚ùå –î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ!")
                let decodedData = try JSONDecoder().decode([Pizza].self, from: data)
                DispatchQueue.main.async {
                    self.pizzas = decodedData
                    print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(self.pizzas.count) –ø–∏—Ü—Ü")
                    print(decodedData.isEmpty ? "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–∏—Ü—Ü!" : "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(decodedData.count) –ø–∏—Ü—Ü")
                }
            } catch {
                print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error.localizedDescription)")
            }
        }
        task.resume()
    }
    
    
    func fetchAllIngredients() {
        guard let url = URL(string: "\(baseURL)/ingredients") else { return }
        
        var request = URLRequest(url: url)
        if let token = token {
            request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        }
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: \(error.localizedDescription)")
                return
            }
            guard let data = data else {
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                return
            }
            do {
                let decodedData = try JSONDecoder().decode([Ingredient].self, from: data)
                DispatchQueue.main.async {
                    self.ingridients = decodedData
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: \(error.localizedDescription)")
            }
        }
        task.resume()
    }
    
    
    func fetchFavoritePizzas(completion: @escaping (Bool, String?) -> Void) {
        guard let token = token, !token.isEmpty else {
            print("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            completion(false, "‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return
        }
        guard let url = URL(string: "\(baseURL)/users/favorite-pizzas/") else {return}
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                DispatchQueue.main.async {
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∏—Ü—Ü: \(error.localizedDescription)")
                    completion(false, error.localizedDescription)
                    return
                }
            }
            if let httpResponse = response as? HTTPURLResponse {
                print("üîπ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: \(httpResponse.statusCode)")
            }
            guard let data = data else {
                print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
            }
            if let responseString = String(data: data, encoding: .utf8) {
                print("üìú –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (RAW): \(responseString)")
            }
            guard !data.isEmpty else {
                print("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤")
                return
            }
            do {
                let decoder = JSONDecoder()
                let decodedData = try decoder.decode([Pizza].self, from: data)
                
                DispatchQueue.main.async {
                    self.favoritePizzas = decodedData
                    
                    completion(true, nil)
                }
            } catch {
                DispatchQueue.main.async {
                    print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: \(error.localizedDescription)")
                    completion(false, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                }
            }
        }
        task.resume()
    }
    
    func addPizzatoFavorites(pizzaID: Int, completion: @escaping (Bool, String?) -> Void){
        guard let url = URL(string: "\(baseURL)/users/favorite-pizzas/\(pizzaID)") else {return}
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        if let token = token {
            request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        }
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ : \(error.localizedDescription)")
                return
            }
            DispatchQueue.main.async {
                self.fetchFavoritePizzas { succes, error in
                    if succes {
                        print("‚úÖ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–∏—Ü—Ü—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                    } else {
                        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∏—Ü—Ü: \(error ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")")
                    }
                }
            }
        }
        task.resume()
    }
    
    func removePizzaFromFavorites(pizzaID: Int, completion: @escaping(Bool, String?) -> Void) {
        guard let url = URL(string: "\(baseURL)/users/favorite-pizzas/\(pizzaID)") else {return}
        var request = URLRequest(url: url)
        request.httpMethod = "DELETE"
        if let token = token {
            request.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        }
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                DispatchQueue.main.async {
                    completion(false, error.localizedDescription)
                }
                return
            }
            guard let httpResponse = response as? HTTPURLResponse else {
                DispatchQueue.main.async {
                    completion(false, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                }
                return
            }
            if httpResponse.statusCode == 200 {
                DispatchQueue.main.async {
                    completion(true, nil)
                }
            } else {
                completion(false, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, –∫–æ–¥: \(httpResponse.statusCode)")
            }
        }.resume()
    }

    
   
    func register(username: String, email: String, password: String, completion: @escaping(Bool, String?) -> Void) {
        guard let url = URL(string: "\(baseURL)/auth/register") else {return}
        
        let requestBody = ["username": username, "email": email, "password": password]
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: requestBody, options: [])
                
        URLSession.shared.dataTask(with: request) {data, response, error in
            if let error = error {
                DispatchQueue.main.async {
                    completion(false, error.localizedDescription)
                }
                return
            }
            guard let data = data else{
                DispatchQueue.main.async {
                    completion(false, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–µ")
                }
                return
            }
            DispatchQueue.main.async {
                completion(true, nil)
            }
        }.resume()
    }
    
    func login(email: String, password: String, completion: @escaping(Bool, String?) -> Void) {
        guard let url = URL(string: "\(baseURL)/auth/login") else {return}
        
        let requestBody = ["email": email, "password": password]
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: requestBody, options: [])
        do {
            let jsonData = try JSONSerialization.data(withJSONObject: requestBody, options: .prettyPrinted)
            request.httpBody = jsonData
            if let jsonString = String(data: jsonData, encoding: .utf8) {
                print("–û–¢–ø—Ä–∞–≤–ª—è–µ–º—ã–π Json: \(jsonString)")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON: \(error.localizedDescription)")
            completion(false, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
            return
        }
        print("URL –∑–∞–ø—Ä–æ—Å–∞: \(request.url!.absoluteString)")
        URLSession.shared.dataTask(with: request) {data, response, error in
            if let error = error {
                DispatchQueue.main.async {
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")
                    completion(false, error.localizedDescription)
                }
                return
            }
            guard let data = data else{
                DispatchQueue.main.async {
                    print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    completion(false, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–µ")
                }
                return
            }
            guard let httpResponse = response as? HTTPURLResponse else {
                DispatchQueue.main.async {
                    completion(false, "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                }
                return
            }
            print("üîπ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: \(httpResponse.statusCode)")

            if data.isEmpty {
                DispatchQueue.main.async {
                    completion(false, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                }
                return
            }

            if httpResponse.statusCode == 401 {
                DispatchQueue.main.async {
                    completion(false, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
                }
                return
            }
            do {
                let decodedResponse = try JSONDecoder().decode(LoginResponse.self, from: data)
                DispatchQueue.main.async {
                    self.token = decodedResponse.access_token
                    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –¢–æ–∫–µ–Ω: \(decodedResponse.access_token)")
                    completion(true, nil)
                }
            } catch {
                DispatchQueue.main.async {
                    print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: \(error.localizedDescription)")
                    completion(false, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                }
            }
        }.resume()
    }
    func logout() {
        token = nil
    }
}
