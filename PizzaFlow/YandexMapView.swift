//
//  YandexMapView.swift
//  PizzaFlow
//
//  Created by 596 on 02.03.2025.
//

import SwiftUI
import YandexMapsMobile

struct YandexMapView: UIViewRepresentable {
    @EnvironmentObject var locationManager: LocationManager
    @Binding var cameraPosition: YMKCameraPosition?
    
    func makeUIView(context: Context) -> YMKMapView {
        let mapView = YMKMapView()
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
        let targetLocation = YMKPoint(latitude: 55.751244, longitude: 37.618423)
        mapView.mapWindow.map.move(
            with: YMKCameraPosition(target: targetLocation, zoom: 12, azimuth: 0, tilt: 0),
            animation: YMKAnimation(type: .smooth, duration: 1),
            cameraCallback: nil
        )
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞–º–µ—Ä—ã
        mapView.mapWindow.map.addCameraListener(with: context.coordinator)
        

        
        return mapView
    }

    func updateUIView(_ uiView: YMKMapView, context: Context) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        if let cameraPosition = cameraPosition {
            uiView.mapWindow.map.move(
                with: cameraPosition,
                animation: YMKAnimation(type: .smooth, duration: 1),
                cameraCallback: nil
            )
        }
        
 
    }

    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }


    class Coordinator: NSObject, YMKMapCameraListener {
        var parent: YandexMapView
        private var lastUpdateTime = Date()
        private let updateInterval: TimeInterval = 1.0 // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        private var lastPosition: YMKPoint?
        private let minDistance: Double = 50 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–º–µ—Ç—Ä—ã)

        init(_ parent: YandexMapView) {
            self.parent = parent
        }
        
        func onCameraPositionChanged(
            with map: YMKMap,
            cameraPosition: YMKCameraPosition,
            cameraUpdateReason: YMKCameraUpdateReason,
            finished: Bool
        ) {
            // 1. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            guard finished else { return }
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            let now = Date()
            guard now.timeIntervalSince(lastUpdateTime) > updateInterval else { return }
            
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏
            if let lastPos = lastPosition {
                let distance = calculateDistance(from: lastPos, to: cameraPosition.target)
                guard distance > minDistance else { return }
            }
            
            // 4. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            lastUpdateTime = now
            lastPosition = cameraPosition.target
            
            print("üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: \(cameraPosition.target.latitude), \(cameraPosition.target.longitude)")
            parent.locationManager.fetchAddress(from: cameraPosition.target)
        }
        
        private func calculateDistance(from p1: YMKPoint, to p2: YMKPoint) -> Double {
            let latDiff = p1.latitude - p2.latitude
            let lonDiff = p1.longitude - p2.longitude
            return sqrt(latDiff * latDiff + lonDiff * lonDiff) * 111000 // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–µ—Ç—Ä—ã
        }
    }
}
